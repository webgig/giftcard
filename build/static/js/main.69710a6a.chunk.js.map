{"version":3,"sources":["logo.svg","helpers/ApiHelper.js","services/UserService.js","components/Login.js","components/PrivateRoute.js","services/CardService.js","components/Cards.js","components/HomePage.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","__webpack_require__","p","apiUrl","authHeader","user","JSON","parse","localStorage","getItem","token","Authorization","Content-Type","handleResponse","_ref","Object","asyncToGenerator","regenerator_default","a","mark","_callee","response","text","data","error","wrap","_context","prev","next","sent","ok","status","UserService","logout","window","location","reload","non_field_errors","statusText","abrupt","Promise","reject","stop","_x","apply","this","arguments","login","username","password","requestOptions","method","headers","body","stringify","fetch","concat","setItem","_x2","removeItem","getMe","_ref2","_callee2","_context2","user_id","then","LoginPage","props","_this","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","state","submitted","loading","handleChange","bind","assertThisInitialized","handleLogin","e","_e$target","target","name","value","setState","defineProperty","preventDefault","returnUrl","console","log","from","_this2","pathname","history","push","_this$state2","react_default","createElement","className","onSubmit","htmlFor","type","id","placeholder","required","autoFocus","onChange","Component","PrivateRoute","component","rest","objectWithoutProperties","Route","assign","render","Redirect","to","CardService","getMyCards","archive","card_id","archived","Cards","cards","card","index","findIndex","nextProps","cardsNew","filter","data-toggle","aria-pressed","onClick","showArchived","length","map","key","width","height","xmlns","preserveAspectRatio","focusable","role","aria-label","fill","x","y","dy","title","description","voucher","HomePage","_this$state","href","stroke","strokeLinecap","strokeLinejoin","strokeWidth","aria-hidden","viewBox","d","cx","cy","r","first_name","Link","components_Cards","param","React","App","BrowserRouter","PrivateRoute_PrivateRoute","exact","path","Boolean","hostname","match","ReactDOM","src_App_0","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.69710a6a.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import UserService from \"../services/UserService\"\n\nexport const apiUrl = \"http://localhost:8000/api\";\n\nexport const authHeader = () => {\n    let user = JSON.parse(localStorage.getItem('user'));\n\n    if (user && user.token) {\n        return { 'Authorization': 'Token ' + user.token, 'Content-Type': 'application/json' };\n    } else {\n        return {};\n    }\n}\n\n\nexport const handleResponse = async(response) => {\n    const text = await response.text()\n    const data = text && JSON.parse(text);\n\n    if (!response.ok) {\n        if (response.status === 401) {\n            UserService.logout();\n            window.location.reload(true);\n        }\n        const error = (data && data.non_field_errors)  || response.statusText;\n\n        return Promise.reject(error);\n    }\n    \n    return data;\n}\n\n","import {apiUrl,authHeader,handleResponse} from \"../helpers/ApiHelper\"\n\n\nconst login = async(username, password) => {\n\n    const requestOptions = {\n        method: 'POST',\n        headers: { 'Content-Type': 'application/json' },\n        body: JSON.stringify({ username, password })\n    };\n\n    let response = await fetch(`${apiUrl}/auth/`, requestOptions);\n    let user = await handleResponse(response);\n\n    if (user) {\n        localStorage.setItem('user', JSON.stringify(user));\n    }\n    return user;\n}   \n\nconst logout = () => {\n    localStorage.removeItem('user');\n}\n\n\n\nconst getMe = async() => {\n    let user = JSON.parse(localStorage.getItem('user'));\n    \n    if (user && user.user_id) {\n        const requestOptions = {\n            method: 'GET',\n            headers: authHeader()\n        };\n        return fetch(`${apiUrl}/users/`+ user.user_id + '/', requestOptions).then(handleResponse);\n    }\n}\n\nconst UserService = {\n    login,\n    logout,\n    getMe\n}\n\n\nexport default UserService;","import React, { Component } from 'react';\nimport UserService from '../services/UserService';\n\nclass LoginPage extends Component {\n    constructor(props) {\n        super(props);\n\n        UserService.logout();\n\n        this.state = {\n            username: '',\n            password: '',\n            submitted: false,\n            loading: false,\n            error: ''\n        };\n\n        this.handleChange = this.handleChange.bind(this);\n        this.handleLogin = this.handleLogin.bind(this);\n    }\n\n    handleChange(e) {\n        const { name, value } = e.target;\n        this.setState({ [name]: value });\n    }\n\n    async handleLogin(e){\n        e.preventDefault();\n\n        this.setState({ submitted: true });\n        const { username, password, returnUrl } = this.state;\n        // stop here if form is invalid\n        if (!(username && password)) {\n            return;\n        }\n\n        this.setState({ loading: true });\n        UserService.login(username,password)\n        .then(\n            user => {\n                console.log(user);\n                const { from } = this.props.location.state || { from: { pathname: \"/\" } };\n                this.props.history.push(from);\n            },\n            error => this.setState({ error, loading: false })\n        );\n     \n    }\n\n    render() {\n       const { username, password, submitted, loading, error } = this.state;\n\n      return (\n            \n            <form className=\"form-signin text-center\" onSubmit={this.handleLogin}>\n              <h2>Prezzee</h2>\n\n              {error && <div className={'alert alert-danger'}>{error}</div> }\n\n              <h1 className=\"h3 mb-3 font-weight-normal\">Please sign in</h1>\n              <label htmlFor=\"inputEmail\" className=\"sr-only\">Email address</label>\n              <input name=\"username\"  type=\"text\" id=\"inputEmail\" className=\"form-control\" placeholder=\"Email address\" required autoFocus onChange={this.handleChange}/>\n              \n              <label htmlFor=\"inputPassword\" value=\"sagar123\" className=\"sr-only\">Password</label>\n              <input name=\"password\"   type=\"password\" id=\"inputPassword\" className=\"form-control\" placeholder=\"Password\" required onChange={this.handleChange}/>\n              \n              <button className=\"btn btn-lg btn-primary btn-block\" type=\"submit\"  >Sign in</button>\n\n            </form>\n      );\n    }\n  }\n  \n  export default LoginPage;","import React from 'react';\nimport { Route, Redirect } from 'react-router-dom';\n\nexport const PrivateRoute = ({ component: Component, ...rest }) => (\n    <Route {...rest} render={props => (\n        localStorage.getItem('user')\n            ? <Component {...props} />\n            : <Redirect to={{ pathname: '/login', state: { from: props.location } }} />\n    )} />\n)\n","import {apiUrl,authHeader,handleResponse} from \"../helpers/ApiHelper\"\n\nconst getMyCards = async() => {\n\n    let user = JSON.parse(localStorage.getItem('user'));\n    \n    if (user && user.user_id) {\n        const requestOptions = {\n            method: 'GET',\n            headers: authHeader(),\n        };\n        return fetch(`${apiUrl}/users/`+ user.user_id + '/cards/', requestOptions).then(handleResponse);\n    }\n}\n\nconst archive = async(card_id,archive) =>{\n\n    if (card_id){\n        const requestOptions = {\n            method: 'PATCH',\n            headers: authHeader(),\n            body:JSON.stringify({archived:archive})\n\n        };\n\n       return await fetch(`${apiUrl}/cards/`+ card_id + '/', requestOptions).then(handleResponse);\n    }\n\n}\n\nconst CardService = {\n    getMyCards,\n    archive\n}\n\nexport default CardService;","import React, { Component } from 'react';\nimport CardService from '../services/CardService';\n\nclass Cards extends Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            archived: false,\n            cards: []\n        }\n    }\n\n    \n    showArchived(){\n        let archived = false;\n\n        if(this.state.archived)\n            archived = false;\n        else\n            archived = true;\n\n        this.setState({ archived:archived });\n    }\n\n    async archive(id,card){\n        let cards = [...this.state.cards];\n        let index = cards.findIndex(card => card.id == id);\n        \n        cards[index] = await CardService.archive(card.id,!card.archived);\n        this.setState({ cards: cards });\n    }\n    componentWillReceiveProps(nextProps){\n       this.setState({cards: nextProps.cards})\n    }\n\n    render() {\n        const { cards } = this.state;\n\n        const cardsNew = cards.filter((card) => {\n            return card.archived == this.state.archived ;\n        })\n\n    \n        return (\n            <div className=\"container\">\n                <button type=\"button\" className=\"btn btn-primary my-2\" data-toggle=\"button\" aria-pressed=\"false\" onClick={this.showArchived.bind(this)}> View Archived Cards</button>\n                \n\n                {cardsNew.length > 0 &&\n                    <div className=\"row\">\n                            {cardsNew.map((card, index) =>\n                             \n                                <div className=\"col-md-4\" key={index}>\n                                    <div className=\"card mb-4 shadow-sm\">\n                                        <svg className=\"bd-placeholder-img card-img-top\" width=\"100%\" height=\"225\" xmlns=\"http://www.w3.org/2000/svg\" preserveAspectRatio=\"xMidYMid slice\" focusable=\"false\" role=\"img\" aria-label=\"Placeholder: Thumbnail\"> \n                                            <rect width=\"100%\" height=\"100%\" fill=\"#55595c\"></rect>\n                                            <text x=\"40%\" y=\"50%\" fill=\"#eceeef\" dy=\".3em\">{card.title}</text>\n                                        </svg>\n                                        <div className=\"card-body\">\n                                            {this.state.archived && \n                                                <h6><span className=\"badge badge-secondary\">Archived</span></h6>\n                                            }\n                                            <div className=\"card-text\">\n                                                <p>{card.description}</p>\n                                                <small><strong>AUD  {card.value}</strong></small>\n                                            </div>\n                                            <div className=\"d-flex justify-content-between align-items-center\">\n                                                <div className=\"btn-group\">\n                                                    <button onClick={this.archive.bind(this,card.id,card)} type=\"button\" className=\"btn btn-sm btn-outline-secondary\">{this.state.archived? \"Unarchive\":\"Archive\"}</button>\n                                                </div>\n                                            \n                                                <small className=\"text-muted\"><strong>Voucher</strong> {card.voucher}</small>\n                                                <small className=\"text-muted\"><strong>Pin</strong>{card.voucher}</small>\n                                            </div>\n                                        </div>\n                                    </div>\n                                </div>\n                                )}\n                    </div>\n                }\n            </div>\n        );\n    }\n}\n\n\nexport default Cards;","import React from 'react';\nimport { Link } from 'react-router-dom';\n\nimport UserService from '../services/UserService';\nimport CardService from '../services/CardService';\n\nimport Cards from '../components/Cards'\n\nclass HomePage extends React.Component {\n    constructor(props) {\n        super(props);\n\n        this.state = {\n            user: {},\n            cards: []\n        };\n    }\n\n    async componentDidMount() {\n        this.setState({ \n            user: JSON.parse(localStorage.getItem('user'))\n        });\n\n        let user = await UserService.getMe();\n\n        let cards = await CardService.getMyCards();\n        \n        this.setState({ user,cards });\n    }\n\n    render() {\n        const { user,cards } = this.state;\n        return (\n            <div>\n                <header className=\"navbar navbar-dark bg-dark shadow-sm\">\n                    <div className=\"container d-flex justify-content-between\">\n                        <a href=\"#\" className=\"navbar-brand d-flex align-items-center\">\n                            <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"20\" height=\"20\" fill=\"none\" stroke=\"currentColor\" strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth=\"2\" aria-hidden=\"true\" className=\"mr-2\" viewBox=\"0 0 24 24\" focusable=\"false\"><path d=\"M23 19a2 2 0 0 1-2 2H3a2 2 0 0 1-2-2V8a2 2 0 0 1 2-2h4l2-3h6l2 3h4a2 2 0 0 1 2 2z\"></path><circle cx=\"12\" cy=\"13\" r=\"4\"></circle></svg>\n                            <strong>Prezzee</strong>\n                        </a>\n                        {user.username && <strong>Hi {user.first_name}</strong>}<Link to=\"/login\">Logout</Link>\n                    </div>\n                </header>\n                <div className=\"album py-5 bg-light\">\n                \n                    <Cards param=\"test\" cards={cards}></Cards>\n                </div>\n            </div>\n        );\n    }\n}\n\nexport { HomePage };","import React, { Component } from 'react';\nimport logo from './logo.svg';\nimport './App.css';\nimport LoginPage from './components/Login';\nimport { PrivateRoute } from './components/PrivateRoute';\nimport { BrowserRouter as Router, Route } from 'react-router-dom';\nimport { HomePage } from './components/HomePage';\n\nclass App extends Component {\n  render() {\n    return (\n        <Router>\n            <div>\n                <PrivateRoute exact path=\"/\" component={HomePage} />\n                <Route path=\"/login\" component={LoginPage} />\n            </div>\n        </Router>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport 'bootstrap/dist/css/bootstrap.min.css'; \nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}